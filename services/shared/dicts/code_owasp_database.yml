---
- lang: ''
  type: Information Disclosure,Confidentiality
  name: Trace.Warn
  desc: Trace shoud be disabled in production enviroment. And should be used only
    for debugging. Ensure you are not providing sensitive informations.
- lang: java
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: System.Diagnostic.Process.Start
  desc: This k_name may be vulnerable to command injection attacks or OS injection
    attacks. Java linking to the native OS can cause serious issues and potentially
    give rise to total server compromise.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: delete
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: exec sp_executesql
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: delete from where
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: exec sp_
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: exec xp_
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: exec @
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: executestatement
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: executeSQL
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: driver
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<meta>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: request.certificate
  desc: Requests from external sources are obviously a key area of a secure code review.
    We
- lang: ''
  type: Information Disclosure,Confidentiality
  name: request.cookie
  desc: Requests from external sources are obviously a key area of a secure code review.
    We
- lang: ''
  type: Information Disclosure,Confidentiality
  name: request.form
  desc: Requests from external sources are obviously a key area of a secure code review.
    We
- lang: ''
  type: Information Disclosure,Confidentiality
  name: request.querystring
  desc: Requests from external sources are obviously a key area of a secure code review.
    We
- lang: java
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: java.sql.Statement.executeQuery
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: java
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: java.sql.Statement.executeUpdate
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: java
  type: Information Disclosure,Confidentiality
  name: javax.servlet.jsp.JspWriter.print
  desc: Can lead to Cross site Scripting
- lang: java
  type: Information Disclosure,Confidentiality
  name: javax.servlet.ServletOutputStream.print
  desc: Can lead to Cross Site Scripting
- lang: java
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: javax.servlet.http.Cookie
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: java
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: javax.servlet.
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<body>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<object>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: DataSource
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: New OleDbConnection
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: ADODB.recordset
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: ".Open"
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: ".Provider"
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: Server.CreateObject
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: ReflectionPermission.MemberAccess
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: sql server
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: sqloledb
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: adodb
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: GetQueryResultInXML
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: enableViewState
  desc: It is important that many variables in machine.config can be overridden in
    the web.config file for a particular application.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: setfilter
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: SqlCommand
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: c#
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: Microsoft.Jet
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: SqlDataReader
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: GetString
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: SqlDataAdapter
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: CommandType
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: StoredProcedure
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: System.Data.Sql
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<applet>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: RC2
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: System.Random
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: Random
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: System.Security.Cryptography
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<ilayer>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: ProtectedMemory
  desc: If storing sensitive data in memory recommend one uses the following.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: HttpOnly
  desc: Cookie manipulation can be key to various application security exploits such
    as session hijacking/fixation and parameter manipulation. One should examine any
    code relating to cookie functionalty as this would have a bearing on session security.
- lang: c#
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: System.NET.Cookie
  desc: Cookie manipulation can be key to various application security exploits such
    as session hijacking/fixation and parameter manipulation. One should examine any
    code relating to cookie functionalty as this would have a bearing on session security.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<frame security"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<iframe security"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: system.web.ui.htmlcontrols.htmlinputhidden
  desc: The input controls below are server classes used to produce and display web
    application form fields. Looking for such references helps locate entry points
    into the application.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: system.web.ui.webcontrols.textbox
  desc: The input controls below are server classes used to produce and display web
    application form fields. Looking for such references helps locate entry points
    into the application.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: system.web.ui.webcontrols.listbox
  desc: The input controls below are server classes used to produce and display web
    application form fields. Looking for such references helps locate entry points
    into the application.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: system.web.ui.webcontrols.checkboxlist
  desc: The input controls below are server classes used to produce and display web
    application form fields. Looking for such references helps locate entry points
    into the application.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: system.web.ui.webcontrols.dropdownlist
  desc: The input controls below are server classes used to produce and display web
    application form fields. Looking for such references helps locate entry points
    into the application.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: requestEncoding
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: responseEncoding
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: trace
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: authorization
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: CustomErrors
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: httpRuntime
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: maxRequestLength
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: forms protection
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: appSettings
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: Insert
  desc: It is recommende not to use this function directly in code. If used in client
    side code could be fatal to database integrity
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: ValidateRequest
  desc: Not validating all input data to a list of potentially dangerous values could
    be fatal, it is recommended to use build in security features of the framework.
    Logging this can also be a source of information leakage. It is important to examine
    all calls to the logging subsystem and to determinate if any sensitive information
    is being logged. Common mistakes are logging userID in conjuction with passwords
    within the authentication functionality or logging database requests which may
    contains sensitive data.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: ObjectInputStream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: pipedinputstream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: objectstream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Denial of Service,Avalability,Authorization,Elevation of privilege
  name: strcpy
  desc: Watch out legacy methods calls.
- lang: ''
  type: Denial of Service,Avalability,Authorization,Elevation of privilege
  name: printf
  desc: Watch out legacy methods calls.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: deny
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: credentials
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: identity impersonate
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: timeout
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: Application_OnAuthenticateRequest
  desc: Each application has it's own global.asax if one is required. Global.asax
    sets the event code and values forn an application using scripts. One must ensure
    that application variables do not contains sensitive informations, as they are
    accessible to the whole application and to all users within it.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: Application_OnAuthorizeRequest
  desc: Each application has it's own global.asax if one is required. Global.asax
    sets the event code and values forn an application using scripts. One must ensure
    that application variables do not contains sensitive informations, as they are
    accessible to the whole application and to all users within it.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: Session_OnStart
  desc: Each application has it's own global.asax if one is required. Global.asax
    sets the event code and values forn an application using scripts. One must ensure
    that application variables do not contains sensitive informations, as they are
    accessible to the whole application and to all users within it.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: Session_OnEnd
  desc: Each application has it's own global.asax if one is required. Global.asax
    sets the event code and values forn an application using scripts. One must ensure
    that application variables do not contains sensitive informations, as they are
    accessible to the whole application and to all users within it.
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: log4net
  desc: Logging can be a source of information leakage. It is important to examine
    all calls to the logging subsystem and to determinate if any sensitive information
    is being logged. Common mistakes are logging userID in conjuction with passwords
    within the authentication functionality or logging database requests which may
    contains sensitive data.
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: System.Diagnostics.Debug
  desc: Logging can be a source of information leakage. It is important to examine
    all calls to the logging subsystem and to determinate if any sensitive information
    is being logged. Common mistakes are logging userID in conjuction with passwords
    within the authentication functionality or logging database requests which may
    contains sensitive data.
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: System.Diagnostics.Trace
  desc: Logging can be a source of information leakage. It is important to examine
    all calls to the logging subsystem and to determinate if any sensitive information
    is being logged. Common mistakes are logging userID in conjuction with passwords
    within the authentication functionality or logging database requests which may
    contains sensitive data.
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: Thread
  desc: Locating code that contains multithreaded functions. Concurrency issuses can
    result in race conditions which may resutl in security vulnerabilities. The Treat
    keyword is where new threats object are created. Code that uses static global
    variables which hold sensitive security informations may cause session issues.
    Code that uses static constructors may also cause issues between threads. Not
    synchronizing the Dispose method may cause issues if a number of threats call
    Dispose at the same time, this may cause resource release issues.
- lang: ''
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: Dispose
  desc: Locating code that contains multithreaded functions. Concurrency issuses can
    result in race conditions which may resutl in security vulnerabilities. The Treat
    keyword is where new threats object are created. Code that uses static global
    variables which hold sensitive security informations may cause session issues.
    Code that uses static constructors may also cause issues between threads. Not
    synchronizing the Dispose method may cause issues if a number of threats call
    Dispose at the same time, this may cause resource release issues.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: Public
  desc: Public and Sealed relate to the design at class level. Classes which are not
    intended to be derived from should be sealed. Make sure all class fields are public
    for a reason. Don't expose anything you do not need to.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: Sealed
  desc: Public and Sealed relate to the design at class level. Classes which are not
    intended to be derived from should be sealed. Make sure all class fields are public
    for a reason. Don't expose anything you do not need to.
- lang: ''
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: Serializable
  desc: Main disadvantage of serialization from security perspective is that, it can
    cause resource overhead to CPU and I/O devices as well as it's a comparatively
    slow communication technology. In case of XML serialisation it is insecure and
    occupy lot of space on disk/ memory and database and it has limitation of being
    accessible from public declared classess only.
- lang: c#
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: AllowPartiallyTrustedCallersAttribute
  desc: It is recommended to check your defined classess for any security vulnerability,
    if done so then check for permissions of each caller in the stack. If ANY of those
    callers do not have the required permission then this is a Security Exception
    need to be managed or removed. To make it more simpler by default a ASP.NET Web
    Application that is running in a partial trust scenario cannot call for a strongly
    named assembly but the only way to call an assembly with a strong name is if the
    strong named assembly is marked with the AllowPartiallyTrustedCallersAttribute
    (APTCA)
- lang: ''
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: GetObjectData
  desc: 'The GetObjectData function is used to serialize the object, and the specialized
    constructor is used to deserialize the object. The constructor and GetObjectData
    are passed the same parameters: an instance of the SerializationInfo class and
    an instance of the StreamingContext structure. Code that calls GetObjectData requires
    the SecurityPermission for providing serialization services. Associated enumeration:
    SecurityPermissionFlag.SerializationFormatter.'
- lang: ''
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: Strongk_nameIdentityPermission
  desc: Identity permissions help protect code from unauthorized access. The runtime
    grants identity permissions when the assembly is loaded based on the evidence
    that is provided this means Link demands using StrongNameIdentityPermissionAttribute
    succeed if only the immediate caller has the correct evidence.
- lang: c#
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: Strongk_nameIdentity
  desc: CLR (common language runtime) validates the identity of the assembly provided
    to it by the loader or host. Thehost can be a server host (Asp.Net) or a shell
    host (command line). This identity, also called as the Evidence, can be a strong
    name (StrongNameIdentityPermission), originating Zone that is Intranet, Internet
    or Trusted site (ZoneIdentitypermission), publishers digitalsignature (PublisherIdentityPermission),
    originating URL(URLIdentityPermission) or originating website(WebSiteIdentityPermission).
    Here in this case one of the attributes are missing or misconfigured.
- lang: ''
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: catch{
  desc: Code may be generated dynamically at runtime. Code that is generated dynamically
    as a function of external input may give rise to issues. If your code contains
    sensitive data does it need to be serialized?
- lang: ''
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: Finally
  desc: Code may be generated dynamically at runtime. Code that is generated dynamically
    as a function of external input may give rise to issues. If your code contains
    sensitive data does it need to be serialized?
- lang: ''
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: trace enabled
  desc: Code may be generated dynamically at runtime. Code that is generated dynamically
    as a function of external input may give rise to issues. If your code contains
    sensitive data does it need to be serialized?
- lang: ''
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: customErrors mode
  desc: Code may be generated dynamically at runtime. Code that is generated dynamically
    as a function of external input may give rise to issues. If your code contains
    sensitive data does it need to be serialized?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: xor
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: DES
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: RNGCryptoServiceProvider
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: SHA
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: MD5
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Non-Repudiation,Spoofing Identity,Repudiation
  name: base64
  desc: If cryptography is used then is a strong enough cipher used i.e. AES or 3DES.
    What size key is used, the larger the better. Where is hashing performed. Are
    password that are being persisted hashed, they should be. How are random numbers
    generated? is the PRNG "random enough"?
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: ".RequestMinimum"
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: ".RequestOptional"
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: Assert
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: Debug.Assert
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: CodeAccessPermission
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: SecurityPermission.ControlEvidence
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: SecurityPermission.SerializationFormatter
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: SecurityPermission.ControlPrincipal
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: SecurityPermission.ControlDomainPolicy
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: SecurityPermission.ControlPolicy
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: java
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: Java.io
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: FileInputStream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: FilterInputStream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: SequenceInputStream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: StringBufferInputStream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: BufferedReader
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: ByteArrayInputStream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: CharArrayReader
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: StreamTokenizer
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: getResourceAsStream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: ConfigurationSettings
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: authentication mode
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: allow
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getParameterValues
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getParameter
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getParameterMap
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getScheme
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getProtocol
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getContentType
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getServerk_name
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getRemoteAddr
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getRemoteHost
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getRealPath
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getLocalk_name
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getAttribute
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getAttributek_names
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getLocalAddr
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: getAuthType
  desc: getAuthType() returns the name of the authentication scheme used to protect
    the servlet. This Method getAuthType() called on request object may not return
    correct authorization scheme.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getRemoteUser
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getCookies
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: isSecure
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: HttpServletRequest
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getQueryString
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getHeader
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getPrincipal
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: isUserInRole
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: "### Castor"
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: org.exolab.castor
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: "### JAXB"
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: java
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: javax.xml
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: "### JMS"
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: JMS
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Hack
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getRequestedSessionId
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getValue
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getComment
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getDomain
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getPath
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getk_name
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: update
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: setHeader
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: addHeader
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getWriter
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getOutputStream
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: executequery
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: ExecuteReader
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: java
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: java.io.PrintWriter.print
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Non Repudiation,Confidentiality,Repudiation
  name: jdbc
  desc: JDBC is not associated with a trusted SQL Server connection and / or credentials
    are stored in clear text
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: select *
  desc: Using SELECT * makes your code vulnerable to changes in underlying table(s)
    and as such should be avoided
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: insert
  desc: Exploiting INSERT statements an attacker is not given any feedback over http
    or web page while a SELECT statement an attacker might receive back errors from
    the SQL server. This could be a case of a blind SQL injection attempt so use carefully
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: execute
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: java
  type: Information Disclosure,Confidentiality
  name: java.sql.ResultSet.getString
  desc: In JDBC 1.0, java.sql.ResultSet.getString() function provide the ResultSet
    interface a limited functionality
- lang: java
  type: Information Disclosure,Confidentiality
  name: java.sql.ResultSet.getObject
  desc: In JDBC 1.0, java.sql.ResultSet.getString() function provide the ResultSet
    interface a limited functionality
- lang: ''
  type: Information Disclosure,Confidentiality
  name: innerHtml
  desc: Here we are looking for responses to the client. Responses which go unvalidated
    or which echo external input without data validation are key areas to examine.
    Many client side attacks results from poor response validation. XSS relies on
    this somewhat.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: innertext
  desc: Here we are looking for responses to the client. Responses which go unvalidated
    or which echo external input without data validation are key areas to examine.
    Many client side attacks results from poor response validation. XSS relies on
    this somewhat.
- lang: java
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: java.sql.Statement.execute
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determinate if the
    application is vulnerable to SQL Injection. One aspect of this is to verify that
    the code uses either SqlParameter, OleDbParameter or OdbcParameter(System.Data.SqlClient).
    These are type and treats parameter as the literal value and not the executable
    code in the database.
- lang: java
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: java.sql.Statement.addBatch
  desc: It is recommende not to use this function because there could be a database
    access error would fail the operation and/ or the driver may not support the batch
    updates
- lang: java
  type: Denial of Service,Avalability,Confidentiality,Information Disclosure
  name: java.sql.Connection.prepareStatement
  desc: Although Prepared Statements helps in defending against SQL Injection, there
    are possibilities of SQL Injection attacks through inappropriate usage of Prepared
    Statements. Foe example a scenario where the input variables are passed directly
    into the Prepared Statement and thereby paving way for SQL Injection attacks.
- lang: java
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: java.io.FileReader
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: java
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: java.io.FileWriter
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: java
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: java.io.RandomAccessFile
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: java
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: java.io.File
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: java
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: java.io.FileOutputStream
  desc: This command are generally used to read data into ones application. They may
    be potential entry points into application. The entry points may be from an external
    source and must be inverstigated. Can be also used in path traversal attacks or
    DoS attacks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: getParameterk_names
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: invalidate
  desc: Always be scared of the session management. Look at each session object within
    the application and ensure the level of security meets the requirements.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: getId
  desc: Always be scared of the session management. Look at each session object within
    the application and ensure the level of security meets the requirements.
- lang: java
  type: Information Disclosure,Confidentiality
  name: java.lang.Runtime.exec
  desc: This k_name may be vulnerable to command injection attacks or OS injection
    attacks. Java linking to the native OS can cause serious issues and potentially
    give rise to total server compromise.
- lang: java
  type: Information Disclosure,Confidentiality
  name: java.io.PrintStream.write
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: log4j
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: jLo
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: Lumberjack
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: MonoLog
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: qflog
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: just4log
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: log4Ant
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: JDLabAgent
  desc: We may come across some information leakage by examing code below contained
    in ones application.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: "### Ajax"
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: XMLHTTP
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: "### Struts"
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: org.apache.struts
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: "### Spring"
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: org.springframework
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: java
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: "### Java Server Faces (JSF)"
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: java
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: import javax.faces
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: "### Hibernate"
  desc: If we can identify major architectural components within that application
    (right away) it can help narKeyPointer our search, and we can then look for known
    vulnerabilities in those components and frameworks.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: import org.hibernate
  desc: Operations performed via a stateless session bypass Hibernate's event model
    and interceptors. Stateless sessions are vulnerable to data aliasing effects,
    due to the lack of a first-level cache
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<frameset>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<embed>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<frame>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<html>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<iframe>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<img>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<style>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: "<layer>"
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Kludge
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Bypass
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Steal
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Stolen
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Divert
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Broke
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Trick
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: Fix
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: ToDo
  desc: Developers say the darnedest thing in their source code. Look for the following
    keywords as pointers to possible software vulnerabilities.. ahhh those developers!
- lang: java
  type: Information Disclosure,Confidentiality
  name: document.write
  desc: Look for Ajax usage, and possible Javascript issues.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: document.cookie
  desc: Cookie manipulation can be key to various application security exploits such
    as session hijacking/fixation and parameter manipulation. One should examine any
    code relating to cookie functionalty as this would have a bearing on session security.
- lang: java
  type: Information Disclosure,Confidentiality
  name: window.location
  desc: Look for Ajax usage, and possible Javascript issues.
- lang: java
  type: Information Disclosure,Confidentiality
  name: document.URL
  desc: Look for Ajax usage, and possible Javascript issues.
- lang: java
  type: Information Disclosure,Confidentiality
  name: window.createRequest
  desc: If this function is used with Java Ajax in client side such then such usage
    should be avoided
- lang: ''
  type: Information Disclosure,Confidentiality
  name: getSession
  desc: Always be scared of the session management. Look at each session object within
    the application and ensure the level of security meets the requirements.
- lang: ''
  type: Integrity,Non Repudiation,Repudiation,Tampering with Data
  name: KeyManagerFactory
  desc: Looking for code which utilises SSL as a medium for point to point encryption.
    This fragment should indicate where SSL functionality has been developed.
- lang: ''
  type: Integrity,Non Repudiation,Repudiation,Tampering with Data
  name: HttpsURLConnection
  desc: Looking for code which utilises SSL as a medium for point to point encryption.
    This fragment should indicate where SSL functionality has been developed.
- lang: ''
  type: Integrity,Non Repudiation,Repudiation,Tampering with Data
  name: TrustManagerFactory
  desc: Looking for code which utilises SSL as a medium for point to point encryption.
    This fragment should indicate where SSL functionality has been developed.
- lang: ''
  type: Integrity,Non Repudiation,Repudiation,Tampering with Data
  name: SSLSocketFactory
  desc: Looking for code which utilises SSL as a medium for point to point encryption.
    This fragment should indicate where SSL functionality has been developed.
- lang: ''
  type: Integrity,Non Repudiation,Repudiation,Tampering with Data
  name: SSLContext
  desc: Looking for code which utilises SSL as a medium for point to point encryption.
    This fragment should indicate where SSL functionality has been developed.
- lang: c#
  type: Integrity,Non Repudiation,Repudiation,Tampering with Data
  name: com.sun.net.ssl
  desc: Looking for code which utilises SSL as a medium for point to point encryption.
    This fragment should indicate where SSL functionality has been developed.
- lang: java
  type: Information Disclosure,Confidentiality
  name: java.sql.Connection.prepareCall
  desc: Searching for Java Database related code this list should help you pinpoint
    classes/methods which are involved in the persistence layer of the application
    being reviewed
- lang: ''
  type: Information Disclosure,Confidentiality
  name: response.write
  desc: Here we are looking for responses to the client. Responses which go unvalidated
    or which echo external input without data validation are key areas to examine.
    Many client side attacks results from poor response validation. XSS relies on
    this somewhat.
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: request.TotalBytes
  desc: Requests from external sources are obviously a key area of a secure code review.
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: request.IsSecureConnection
  desc: Requests from external sources are obviously a key area of a secure code review.
    We
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: request.servervariables
  desc: Requests from external sources are obviously a key area of a secure code review.
    We
- lang: ''
  type: Information Disclosure,Confidentiality
  name: "<%="
  desc: Here we are looking for responses to the client. Responses which go unvalidated
    or which echo external input without data validation are key areas to examine.
    Many client side attacks results from poor response validation. XSS relies on
    this somewhat.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: HttpUtility
  desc: Here we are looking for responses to the client. Responses which go unvalidated
    or which echo external input without data validation are key areas to examine.
    Many client side attacks results from poor response validation. XSS relies on
    this somewhat.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: enableViewStateMac
  desc: It is important that many variables in machine.config can be overridden in
    the web.config file for a particular application.
- lang: ''
  type: Denial of Service,Avalability,Integrity,Tampering with Data
  name: SecureString
  desc: If storing sensitive data in memory recommend one uses the following.
- lang: ''
  type: Denial of Service,Avalability,Information Disclosure,Confidentiality
  name: Console.WriteLine
  desc: Logging can be a source of information leakage. It is important to examine
    all calls to the logging subsystem and to determinate if any sensitive information
    is being logged. Common mistakes are logging userID in conjuction with passwords
    within the authentication functionality or logging database requests which may
    contains sensitive data.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: System.Reflection
  desc: If Code that is generated dynamically (runtime) as a function of external
    input may give rise to the security issues. This means if your code contains sensitive
    data does it need to be serialized?
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: SecurityPermission.SkipVerification
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: addCookie
  desc: This API call may be avenues for parameter, header, URL & Cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as may of such API's obtain the parameters directly from HTTP requests.
- lang: c#
  type: Information Disclosure,Integrity,Confidentiality,Tampering with Data
  name: debug
  desc: The .NET Framework relies on .config files to define configuration settings.
    The .config files are text-based XML files. Many .config files can, and typically
    do, exist on a single system. Web applications refer to a web.config file located
    in the application's root directory. For ASP.NET applications, web.config information
    about most aspects of the application's operation.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: UrlEncode
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Authentication,Information Disclosure,Spoofing Identity,Confidentiality
  name: SecurityPermission.UnmanagedCode
  desc: Bypassing the code access security permission? Not a good idea. This keyword
    is a part of a list of potentially dangerous permissions such as calling unmanaged
    code, outside the CLR.
- lang: ''
  type: Information Disclosure,Confidentiality,Authorization,Elevation of privilege
  name: HtmlEncode
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: void Write
  desc: Different programming languages use different terms to identify the fundamental
    managed types. Class library designers must avoid using language-specific terminology.
    Follow the rules described in this section to avoid type name confusion. Use names
    that describe a type's meaning rather than names that describe the type. In the
    rare case that a parameter has no semantic meaning beyond its type, use a generic
    name.
- lang: ''
  type: Information Disclosure,Confidentiality
  name: Sub Write
  desc: Different programming languages use different terms to identify the fundamental
    managed types. Class library designers must avoid using language-specific terminology.
    Follow the rules described in this section to avoid type name confusion. Use names
    that describe a type's meaning rather than names that describe the type. In the
    rare case that a parameter has no semantic meaning beyond its type, use a generic
    name.
- lang: ''
  type: ''
  name: password
  desc: It is inadvisable to embed passwords in source code.
- lang: HTML
  type: ''
  name: URLEncode
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display and
    use of such tags within a web application.
- lang: HTML
  type: ''
  name: "<iframe security "
  desc: Many of the HTML tags below can be used for client side attacks such as cross
    site scripting. It is important to examine the context in which these tags are
    used and to examine any relevant data validation associated with the display and
    use of such tags within a web application.
- lang: ''
  type: ''
  name: innerText
  desc: Responses which go unvalidated or which echo external input without data validation
    are key areas to examine. Many client side attacks result from poor response validation.
    XSS relies on this somewhat.
- lang: ''
  type: ''
  name: innerHTML
  desc: Responses which go unvalidated or which echo external input without data validation
    are key areas to examine. Many client side attacks result from poor response validation.
    XSS relies on this somewhat.
- lang: ''
  type: ''
  name: execute sp_executesql
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determine if the application
    is vulnerable to SQL injection. One aspect of this is to verify that the code
    uses either SqlParameter, OleDbParameter, or OdbcParameter(System.Data.SqlClient).
    These are typed and treat parameters as the literal value and not executable code
    in the database.
- lang: ''
  type: ''
  name: select from
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determine if the application
    is vulnerable to SQL injection. One aspect of this is to verify that the code
    uses either SqlParameter, OleDbParameter, or OdbcParameter(System.Data.SqlClient).
    These are typed and treat parameters as the literal value and not executable code
    in the database.
- lang: ''
  type: ''
  name: execute sp_
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determine if the application
    is vulnerable to SQL injection. One aspect of this is to verify that the code
    uses either SqlParameter, OleDbParameter, or OdbcParameter(System.Data.SqlClient).
    These are typed and treat parameters as the literal value and not executable code
    in the database.
- lang: ''
  type: ''
  name: execute @
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determine if the application
    is vulnerable to SQL injection. One aspect of this is to verify that the code
    uses either SqlParameter, OleDbParameter, or OdbcParameter(System.Data.SqlClient).
    These are typed and treat parameters as the literal value and not executable code
    in the database.
- lang: ''
  type: ''
  name: executeQuery
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determine if the application
    is vulnerable to SQL injection. One aspect of this is to verify that the code
    uses either SqlParameter, OleDbParameter, or OdbcParameter(System.Data.SqlClient).
    These are typed and treat parameters as the literal value and not executable code
    in the database.
- lang: ''
  type: ''
  name: System.Data.sql
  desc: Locating where a database may be involved in the code is an important aspect
    of the code review. Looking at the database code will help determine if the application
    is vulnerable to SQL injection. One aspect of this is to verify that the code
    uses either SqlParameter, OleDbParameter, or OdbcParameter(System.Data.SqlClient).
    These are typed and treat parameters as the literal value and not executable code
    in the database.
- lang: javascript
  type: ''
  name: eval(
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.referrer
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.attachEvent
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.body
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.body.innerHtml
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.body.innerText
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.close
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.create
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.createElement
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.execCommand
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.forms[0].action
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.location
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.open
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.URLUnencoded
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: document.writeln
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: location.hash
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: location.href
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: location.search
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: window.alert
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: window.attachEvent
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: window.execScript
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: window.open
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: window.navigate
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: window.setInterval
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: window.setTimeout
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.accepttypes
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.browser
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.files
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.headers
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.httpmethod
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.item
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: 'request.form '
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.cookies
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.rawurl
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.url
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.urlreferrer
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.useragent
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.userlanguages
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: request.BinaryRead
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: InputStream
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: HiddenField.Value
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: TextBox.Text
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: javascript
  type: ''
  name: recordSet
  desc: Ajax and JavaScript have brought functionality back to the client side, which
    has brought a number of old security issues back to the forefront. The following
    keywords relate to API calls used to manipulate user state or the control the
    browser. The event of AJAX and other Web 2.0 paradigms has pushed security concerns
    back to the client side, but not excluding traditional server side security concerns.
- lang: java
  type: ''
  name: java.util.zip
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: java.util.jar
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: PipedInputStream
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: File
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: mkdir
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: renameTo
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: java.io.File.delete
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: java.io.File.listFiles
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: java.io.File.list
  desc: These are used to read data into one's application. They may be potential
    entry points into an application. The entry points may be from an external source
    and must be investigated. These may also be used in path traversal attacks or
    DoS attacks.
- lang: java
  type: ''
  name: javax.servlet.*
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getParameterNames
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getServerName
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getLocalName
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getAttributeNames
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getHeaderNames
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getHeaders
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getUserPrincipal
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getInputStream
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: setAttribute
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: putValue
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getName
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getMethod
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getReader
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getRequestURI
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getRequestURL
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: getValueNames
  desc: These API calls may be avenues for parameter, header, URL, and cookie tampering,
    HTTP Response Splitting and information leakage. They should be examined closely
    as many of such APIs obtain the parameters directly from HTTP requests.
- lang: java
  type: ''
  name: select
  desc: Searching for Java Database related code this list should help you pinpoint
    classes/methods which are involved in the persistence layer of the application
    being reviewed.
- lang: java
  type: ''
  name: createStatement
  desc: Searching for Java Database related code this list should help you pinpoint
    classes/methods which are involved in the persistence layer of the application
    being reviewed.
- lang: java
  type: ''
  name: java.lang.Runtime.getRuntime
  desc: Here we may be vulnerable to command injection attacks or OS injection attacks.
    Java linking to the native OS can cause serious issues and potentially give rise
    to total server compromise.
- lang: java
  type: ''
  name: java.lang.ClassLoader.defineClass
  desc: The following may lead to arbitrary java code execution if source of input
    data is entrusted or not validated.
- lang: java
  type: ''
  name: java.net.URLClassLoader
  desc: The following may lead to arbitrary java code execution if source of input
    data is entrusted or not validated.
- lang: java
  type: ''
  name: java.beans.Instrospector.getBeanInfo
  desc: The following may lead to arbitrary java code execution if source of input
    data is entrusted or not validated.
- lang: java
  type: ''
  name: System.load
  desc: The following may lead to arbitrary java code execution if source of input
    data is entrusted or not validated.
- lang: java
  type: ''
  name: System.loadLibrary
  desc: The following may lead to arbitrary java code execution if source of input
    data is entrusted or not validated.
- lang: java
  type: ''
  name: Runtime.exec
  desc: The following may lead to arbitrary java code execution if source of input
    data is entrusted or not validated.
- lang: java
  type: ''
  name: ProcessBuilder
  desc: The following may lead to arbitrary java code execution if source of input
    data is entrusted or not validated.
- lang: java
  type: ''
  name: javax.script.ScriptEngine.eval
  desc: The following may lead to arbitrary java code execution if source of input
    data is entrusted or not validated.
