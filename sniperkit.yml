---
syntax_version: "9"

sniperkit:
  settings:
    default:
      gui:
        port: 6000

packages:
  mapping:
    repology:
  download:
    models:
    - name: InceptionNet # name of your model
      framework: # the framework to use
        name: MXNet # framework for the model
        version: ^0.1 # framework version constraint
      version: 1.0 # version information in semantic version format
      container: # containers used to perform model prediction
                 # multiple platforms can be specified
        amd64:   # if unspecified, then the default container for the framework is used
          gpu: raiproject/carml-mxnet:amd64-cpu
          cpu: raiproject/carml-mxnet:amd64-gpu
        ppc64le:
          cpu: raiproject/carml-mxnet:ppc64le-gpu
          gpu: raiproject/carml-mxnet:ppc64le-gpu
      description: >
        An image-classification convolutional network.
        Inception achieves 21.2% top-1 and 5.6% top-5 error on the ILSVRC 2012 validation dataset.
        It consists of fewer than 25M parameters.
      references: # references to papers / websites / etc.. describing the model
        - https://arxiv.org/pdf/1512.00567.pdf
      # license of the model
      license: MIT
      # inputs to the model 
      inputs:
        # first input type for the model
        - type: image
          # description of the first input
          description: the input image
          parameters: # type parameters
            dimensions: [1, 3, 224, 224]
      output:
        # the type of the output
        type: feature
        # a description of the output parameter
        description: the output label
        parameters:
          # type parameters 
          features_url: http://data.dmlc.ml/mxnet/models/imagenet/synset.txt
      before_preprocess: >
        code... 
      preprocess: >
        code... 
      after_preprocess: >
        code... 
      before_postprocess: >
        code... 
      postprocess: >
        code... 
      after_postprocess: >
        code... 
      model: # specifies model graph and weights resources
        base_url: http://data.dmlc.ml/models/imagenet/inception-bn/
        graph_path: Inception-BN-symbol.json
        weights_path: Inception-BN-0126.params
        is_archive: false # if set, then the base_url is a url to an archive
                          # the graph_path and weights_path then denote the 
                          # file names of the graph and weights within the archive
      attributes: # extra network attributes 
        kind: CNN # the kind of neural network (CNN, RNN, ...)
        training_dataset: ImageNet # dataset used to for training
        manifest_author: abduld
      hidden: false # hide the model from the frontend
    frameworks:
    - name: MXNet # name of the framework
      version: 0.1 # framework version
      container: # containers used to perform model prediction
                 # multiple platforms can be specified
        amd64:   # if unspecified, then the default container for the framework is used
          gpu: raiproject/carml-mxnet:amd64-cpu
          cpu: raiproject/carml-mxnet:amd64-gpu
        ppc64le:
          cpu: raiproject/carml-mxnet:ppc64le-gpu
          gpu: raiproject/carml-mxnet:ppc64le-gpu      

projects:
  - project_name: sniperkit-macros
    docker_image: roscopecoltran/sniperkit:1.0-alpine3.6
    work_in_project_folder_as: /go/src/roscopecoltran/sniperkit
    macros:
      setup:
        usage: call after pulling the project, to install dependencies
        actions:
        - govendor fetch +missing
      build:
        usage: build the project
        actions:
        - go build -o `pwd | xargs basename`
      build-all:
        usage: build the project for linux, OSX, and for Windows
        actions:
        - export dirName=`pwd | xargs basename`
        - echo Building for linux...
        - env GOOS=linux GOARCH=amd64 go build -o `echo $dirName`Linux
        - echo Building for OSX...
        - env GOOS=darwin GOARCH=amd64 go build -o `echo $dirName`OSX
        - echo Building for Windows...
        - env GOOS=windows GOARCH=amd64 go build -o `echo $dirName`Windows.exe
        aliases:
        - ba
      release:
        usage: release the project for linux, OSX, and Windows
        actions:
        # create a build tag
        - export RELEASE_TAG="Build from commit `git rev-parse HEAD`, at `env TZ=UTC+7 date '+%Hh%Mmin%Ssec on %Y/%m/%d (PDT)'`"
        - echo $RELEASE_TAG
        - export RELEASE_TAG=" + \". $RELEASE_TAG\""
        # insert the build tag in the description of the program
        - sed -i "s#//RELEASE_BUILD_PLACEHOLDER//#$RELEASE_TAG#" main.go
        # compile for all architectures
        - export dirName=`pwd | xargs basename`
        - echo Building for linux...
        - env GOOS=linux GOARCH=amd64 go build -o release/linux/`echo $dirName`
        - echo Building for OSX...
        - env GOOS=darwin GOARCH=amd64 go build -o release/osx/`echo $dirName`
        - echo Building for Windows...
        - env GOOS=windows GOARCH=amd64 go build -o release/windows/`echo $dirName`.exe
        # undo changes from the source code of the program
        - sed -i "s#$RELEASE_TAG#//RELEASE_BUILD_PLACEHOLDER//#" main.go
      build-linux:
        usage: build the project for Linux
        actions:
        - env GOOS=linux GOARCH=amd64 go build -o `pwd | xargs basename`Linux
        aliases:
        - bl
      build-osx:
        usage: build the project for OSX
        actions:
        - env GOOS=darwin GOARCH=amd64 go build -o `pwd | xargs basename`OSX
        aliases:
        - bo
        description: cross-compile the project to run on OSX, with architecture amd64.
      build-windows:
        usage: build the project for Windows
        actions:
        - env GOOS=windows GOARCH=amd64 go build -o `pwd | xargs basename`Windows.exe
        aliases:
        - bw
      run:
        usage: run the project in the container
        volumes:
          dockersock: # mount docker socket run nut in a container
            host_path: /var/run/docker.sock
            container_path: /var/run/docker.sock
        actions:
        - ./`pwd | xargs basename`
      test:
        usage: test the project
        actions:
        - go test
        - cd config
        - go test
      code:
        usage: open this project in vscode
        docker_image: ctaggart/golang-vscode
        enable_gui: true
        volumes:
          dockersock: # mount docker socket run nut in a container
            host_path: /var/run/docker.sock
            container_path: /var/run/docker.sock
        security_opts:
        - seccomp=unconfined
        actions:
        - su - vscode -c "export GOPATH=/go; code -w /go/src/github.com/roscopecoltran/sniperkit-macros"

services:
  docker:

    registry:
      hosts:
        - ALL
      image: registry
      tag: latest
      ports:
        - container: 5000/tcp
          local: 0.0.0.0:1010
      environment:
        - SETTINGS_FLAVOR=s3
        - AWS_BUCKET=yourbucket
        - STORAGE_PATH=/registry
        - AWS_KEY=YOURAWSKEY
        - AWS_SECRET=YOURAWSSECRETKEY
        - SEARCH_BACKEND=sqlalchemy

    crane:
      services:
        crane:
          image: golang:1.9-alpine3.6
          rm: true
          interactive: true
          tty: true
          volume:
            - "$GOPATH:/go"
            - "/var/run/docker.sock:/var/run/docker.sock"
          workdir: /go/src/github.com/michaelsauter/crane
          cmd: ["crane"]
      groups:
        default:
        - crane
        development:
        - crane
      accelerated-mounts:
        "$GOPATH:/go":
          uid: 1000
          gid: 1000    

  ci:
    jenkins:
      hosts:
        - docker01
      image: luzifer/jenkins
      tag: latest
      volumes:
        - "/home/ubuntu/data/jenkins_home:/var/jenkins_home"
      ports:
        - container: 8080/tcp
          local: 0.0.0.0:1000

  tasks:
    machinery:
      broker: 'amqp://guest:guest@localhost:5672/'
      default_queue: machinery_tasks
      result_backend: 'redis://127.0.0.1:6379'
      results_expire_in: 3600000
      amqp:
        binding_key: machinery_task
        exchange: machinery_exchange
        exchange_type: direct
        prefetch_count: 3

info:
  social:
    - name: facebook
    - name: twitter
    - name: linkedin
    - name: google-plus

  development:
    - name: github
    - name: gitlab
    - name: bitbucket

  analysis:
    project:
      vcs:  
        - name: github
          rank:
      licenses:
    author:
      companies:

  vcs:
    gitlab:
    bitbucket:
    github:
      meta:
      features:
      - name: starred
      - name: watched
      - name: forks
      - name: issues
      - name: pull_requests

